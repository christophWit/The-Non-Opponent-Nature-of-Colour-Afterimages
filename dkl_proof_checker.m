function dkl_proof_checker
% 2025.07.09 cw

close all; clc; 

% To Choose:
which_circle = 'dkl';
which_circle = 'luv';
switch lower(which_circle)
    case 'dkl'
        dkl_lum = 0;
        dkl_sat = 1;
        dkl0 = [ones(37,1)*dkl_lum,(0:10:360)',ones(37,1)*dkl_sat];
        COL0 = colourconverter(dkl0, 'dkl_pol', 2);
        bg = [1 0 0]*dkl_lum;
        BG = colourconverter(bg, 'dkl', 2);
    case 'luv'
        luv_lum = 70;
        %luv_lum = 50;
        luv_sat = 50;
        luv0 = [ones(37,1)*luv_lum,(0:10:360)',ones(37,1)*luv_sat];
        COL0 = colourconverter(luv0, 'Luv_pol', 2);

        bg = [1 0 0]*luv_lum;
        BG = colourconverter(bg, 'Luv', 2);
end

% To Choose:
%sens = 'stockmansharpe'; cmf = '1931';
sens = 'smithpokorny'; cmf = '1931';
COL0.lms    = XYZ2lms(COL0.XYZ, sens, cmf);
BG.lms      = XYZ2lms(BG.XYZ, sens, cmf);

MON.xyY = srgb;
MON.XYZ = xyY2XYZ(MON.xyY);
MON.lms = XYZ2lms(MON.XYZ, sens, cmf);


GAM.XYZ = iso_gamuter(BG.xyY(1,3), MON.xyY);
GAM.lms  = XYZ2lms(GAM.XYZ, sens, cmf);


COL0.cc = lms2cc(COL0.lms, BG.lms);
dkl_cc = cc2dkl_iso(COL0.cc);

%% DKL
dkl         = lms2dkl(COL0.lms, BG.lms);
dkl_g       = lms2dkl(COL0.lms, BG.lms, MON.lms);

GAM.dkl0    = lms2dkl(GAM.lms, BG.lms);
GAM.dkl_g   = lms2dkl(GAM.lms, BG.lms, MON.lms);

BG.dkl  = lms2dkl(BG.lms, BG.lms);

%% ADAPTATION
k=0.5;
ADAPTED.dkl = BG.dkl - k*dkl;
ADAPTED.dkl_g = BG.dkl - k*dkl_g;

%% GRAPHIX

figure;
maxax = 1.7; 

subplot(1,2,1);
hold on
plot_box1;
inds = convhull(GAM.dkl0(:,2),GAM.dkl0(:,3)); plot(GAM.dkl0(inds,2),GAM.dkl0(inds,3), '-', 'Color', [1 1 1]*0.5); 
scatter(dkl(:,2),dkl(:,3),30,COL0.rgb/255, 'o', 'filled', 'MarkerEdgeColor', 'k');
scatter(ADAPTED.dkl(:,2),ADAPTED.dkl(:,3),30,COL0.rgb/255, 'o', 'filled', 'MarkerEdgeColor', 'k');
plot(dkl_cc(:,2),dkl_cc(:,3),'k.');
plot(BG.dkl(:,2),BG.dkl(:,3),'k+');
hold off
xlabel('L-M');
ylabel('S-(L+M)');
axis([-1 1 -1 1]*maxax);
axis square;
title('RAW SCALE', 'FontWeight', 'bold');

subplot(1,2,2);
hold on
plot_box1;
inds = convhull(GAM.dkl_g(:,2),GAM.dkl_g(:,3)); plot(GAM.dkl_g(inds,2),GAM.dkl_g(inds,3), '-', 'Color', [1 1 1]*0.5); 
scatter(dkl_g(:,2),dkl_g(:,3),30,COL0.rgb/255, 'o', 'filled', 'MarkerEdgeColor', 'k');
scatter(ADAPTED.dkl_g(:,2),ADAPTED.dkl_g(:,3),30,COL0.rgb/255, 'o', 'filled', 'MarkerEdgeColor', 'k');
plot(BG.dkl(:,2),BG.dkl(:,3),'k+');
hold off
xlabel('L-M');
ylabel('S-(L+M)');
axis([-1 1 -1 1]*maxax);
axis square;
title('FIT TO GAMUT', 'FontWeight', 'bold');

%% ***************************** SUBFUNCTIONS *****************************

%% cc2dkl
function dkl = cc2dkl_iso(cc)
% 2025.07.09 [cw]
M = [...
    0 0 0;...
    1 -1 0;...
    0 0 1];

dkl = M*cc';
dkl = dkl';

%% cc2lms
function [lms, cone_increments] = cc2lms(cc, lms0)
% cone contrasts (cc)       = [dL/L0, dM/M0, dS/S0]
% cone increments (dLMS)    = [ccL*L0, ccM*M0, ccS*S0]
% cone excitations (LMS)    = [dL+L0, dM+M0, dS+S0] 
% (cf. Kaiser & Boynton, 1996, p.564)
% INPUT:
% cc    = cone contrasts [dL/L0, dM/M0, dS/S0]
% lms0  = cone excitations of adapting stimulus (e.g., background)
% OUTPUT:
% lms   = one excitations of non-adapted stimuli
% cone_increments = cone increments (dLMS)
% 2025.04.15 * based on lms2conecontrast [cw]
cone_increments = bsxfun(@times,cc, lms0); % dLMS = [ccL*L0, ccM*M0, ccS*S0]
lms = bsxfun(@plus,cone_increments, lms0); % lms = [dL+L0, dM+M0, dS+S0]

%% iso_gamuter
function [XYZ, only, full] = iso_gamuter(lum, mon_xyY)
%2023.01.14 * [cw]

if nargin < 2
    mon_xyY = srgb;
    if nargin == 0
        lum = 50;
    end
end

mon_XYZ = xyY2XYZ(mon_xyY);

R = mon_xyY(1,3);
G = mon_xyY(2,3);
B = mon_xyY(3,3);

if lum > R+G+B
    error('lum higher than white');
end

kR = helper(lum, R, G, B);
kG = helper(lum, G, B, R);
kG = circshift(kG,1,2);
kB = helper(lum, B, R, G);
kB = circshift(kB,2,2);

full = [kR; kG; kB];
only = full(any(~isnan(full),2),:);
only = uniquetol(only, 10^-12, 'ByRows', true);
% k = convhull(only(:,1),only(:,2),only(:,3));
% only = only(k,:);

xR = bsxfun(@times,mon_XYZ(1,:),only(:,1));
xG = bsxfun(@times,mon_XYZ(2,:),only(:,2));
xB = bsxfun(@times,mon_XYZ(3,:),only(:,3));

XYZ = xR+xG+xB;

%% helper
function kR = helper(lum, R, G, B)

kR = NaN(1,3);
kRg = NaN(1,3);
kRb = NaN(1,3);
kRgb = NaN(1,3); 
kRbg = NaN(1,3);

if lum < R
    kR = [lum/R 0 0];
else
    if lum < R+G
        kRg = [1 (lum-R)/G 0]; 
    else
        kRgb = [1 1 (lum-R-G)/B];
    end
    if lum < R+B
        kRb = [1 0 (lum-R)/B]; 
    else
        kRbg = [1 (lum-R-B)/G 1];
    end
end
kR = [kR; kRg; kRb; kRgb; kRbg];

%% lms2cc
function [cone_contrasts, cone_increments] = lms2cc(lms, lms0)
% cone contrasts = [dL/L0, dM/M0, dS/S0]
% cone increments = [L-L0, M-M0, S-S0] (Kaiser & Boynton, 1996, p.564)
% INPUT:
% lms   = cone excitations of the stimuli (L, M, S).
% lms0  = cone excitations of the adapting background (L0, M0, S0).
% OUTPUT:
% cone_contrasts
% 2020.09.16 * based on "simulate_adaptation" [cw]

cone_increments = bsxfun(@minus,lms,lms0); % [L-L0, M-M0, S-S0]
cone_contrasts  = bsxfun(@rdivide,cone_increments,lms0); % [dL/L0, dM/M0, dS/S0]

%% lms2dkl
function [dkl, M] = lms2dkl(lms, lms0, monlms)
% Converts cone excitations (lms) to DKL coordinates (dkl) realtive to the
% adapting white-point (lms0). Optionally, DKL space may be rescaled to fit
% into the monitor gamut (monlms).
% INPUT:
% lms    = cone excitations (in columns) of the stimuli (in rows)
% lms0   = cone excitations of the adapting stimulus (e.g., the background)
% monlms = L, M, S (in columns) for the monitor primaries R, G, B (in rows)
% OUTPUT:
% dkl   = DKL axis (in columns) for each lms stimulus (in rows).
% M     = transformation matrix that converts from lms to DKL.
% The transformation matrix M is equivalent to the one from Brainard
% (1996), except for the scaling. Input monlms rescales the axis so that
% the isoluminant hue circle fits into the monitor gamut; this is the same
% scaling as in DKLDemo of Psychtoolbox. 
% 2025.04.11
 
% INCREMENTS:
dlms = lms-ones(size(lms,1),1)*lms0;
 
L0 = lms0(1);
M0 = lms0(2);
S0 = lms0(3);
 
% TRANSFORMATION MATRIX THAT SCALES RELATIVE TO WP (L0, M0, S0)
M = [...
    1/(L0+M0),  1/(L0+M0),      0;...
    1/L0,       -1/M0,      0;...
    -1/(L0+M0), -1/(L0+M0), 1/S0];


% RESCALING TO MONITOR GAMUT
if nargin > 2    
    [maxL, maxS] = map2mongamut(M, lms0, monlms);
    M(2,:) = M(2,:)/maxL;
    M(3,:) = M(3,:)/maxS;
end

% APPLY TRANSFORMATION MATRIX
dkl = dlms * M';

%% map2mongamut
function [maxLM, maxS] = map2mongamut(M, lms0, monlms)
% Produces scaling factors for the L-M and S-(L+M) axis. This function is
% based on David Brainard's function MaximizeGamutContrast in Psychtoolbox.
% INPUT:
% M = LMS to DKL conversion matrix, as implemented in function lms2dkl.
% lms0 = LMS signal (cone excitations) of the adapting white-point (i.e.,
% background). 
% monlms = LMS of the monitor primaries (at maximum).
% OUTPUT:
% maxLM, maxS = Maximum within gamut expressed relative to the original
% dkl unit; dividing unit length by these maxima makes units the length of
% those maxima. 
% 2025.07.11 based on PTB MaximizeGamutContrast. [cw]

% DEFINE THE POLES IN DKL AT UNIT LENGTH ----------------------------------
pols = [...
    0  1  0;... L-M pole
    0 -1  0;... M-L pole
    0  0  1;... S-(L+M) pole
    0  0 -1;... (L+M)-S pole
    ];

% CONVERT DKL TO CONE INCREMENTS (dlms) -----------------------------------
% Cone increments = lms signal - lms0;
pole_dlms = pols / M';

% CONVERT LMS TO RGB ------------------------------------------------------
% This can be done directly with the cone-increments: 
rgb0 = lms0/(monlms(1:3,1:3));
pole_drgb = pole_dlms/(monlms(1:3,1:3));

% The below code, going through lms signal first, is equivalent to direct
% conversion of dlms:
% pole_lms = pole_dlms+ones(size(pole_dlms,1),1)*lms0;
% pole_lms = round(pole_lms,12);
% pole_rgb= pole_lms/(monlms(1:3,1:3));
% pole_drgb = pole_rgb-rgb0

% CALCULATE THE RATIO BETWEEN DKL UNIT LENGTH AND MAX RGB -----------------
% RGB gamut is 0 (minimum) and 1 (maximum); subtracting the rgb0 (adapting
% wp) allows determing the length away from rgb0. The result of this
% calculation indicates for each primary how many time the original DKL
% unit fits within the gamut of that primary.

% L-M Mechanism:
maxL = (1-rgb0)./(pole_drgb(1,:)); % L-M direction
maxM = (0-rgb0)./(pole_drgb(2,:)); % M-L direction

% S-(L+M) Mechanism:
maxS1 = (1-rgb0)./(pole_drgb(3,:)); % +S direction
maxS2 = (0-rgb0)./(pole_drgb(4,:)); % -S direction

% IDENTIFY SCALING FACTORS ------------------------------------------------
% The primary that defines the limit in a given direction is the smallest
% ratio because that primatry would be the first to fall out of gamut when
% increasing DKL saturation. As both direction of the axes are scaled by
% the same factor, the scaling factor is the minimum length (absolute min)
% of both directions together. 

maxLM = min(abs([maxL,maxM]));
maxS = min(abs([maxS1,maxS2]));

%% plot_box1
function plot_box1

plot([-1 1]*2, [1 1], ':','Color', [1 1 1]*.7);
plot([-1 1]*2, [-1 -1], ':','Color', [1 1 1]*.7);
plot([-1 1]*2, [0 0], ':','Color', [1 1 1]*.7);
plot([0 0], [-1 1]*2, ':','Color', [1 1 1]*.7);
plot([-1 -1], [-1 1]*2, ':','Color', [1 1 1]*.7);
plot([1 1], [-1 1]*2, ':','Color', [1 1 1]*.7);

%% srgb
function [mon_xyY, mon_ldt, mon_oog] = srgb
mon_ldt = [...
    0,0.077399,0.154799,0.232198,0.309598,0.386997,0.464396,0.541796,0.619195,0.696594,0.773994,0.853367,0.937509,1.026303,1.119818,1.218123,1.321287,1.429375,1.542452,1.660583,1.78383,1.912253,2.045914,2.184872,2.329185,2.47891,2.634105,2.794824,2.961123,3.133055,3.310673,3.494031,3.68318,3.878171,4.079055,4.285881,4.498698,4.717556,4.942502,5.173584,5.410848,5.654341,5.904108,6.160196,6.422649,6.691512,6.966827,7.24864,7.536993,7.831928,8.133488,8.441715,8.756651,9.078335,9.40681,9.742115,10.08429,10.4333750000000,10.78941,11.1524320000000,11.5224820000000,11.8995970000000,12.2838150000000,12.6751740000000,13.0737120000000,13.4794650000000,13.89247,14.3127650000000,14.7403850000000,15.1753660000000,15.6177440000000,16.0675550000000,16.5248330000000,16.9896140000000,17.4619330000000,17.9418240000000,18.4293220000000,18.92446,19.4272720000000,19.9377930000000,20.4560540000000,20.98209,21.5159340000000,22.0576180000000,22.6071750000000,23.1646360000000,23.7300360000000,24.3034040000000,24.8847740000000,25.4741760000000,26.0716420000000,26.6772030000000,27.2908910000000,27.9127360000000,28.5427690000000,29.18102,29.82752,30.4822990000000,31.1453870000000,31.8168130000000,32.4966090000000,33.1848020000000,33.8814220000000,34.5864990000000,35.3000620000000,36.0221390000000,36.75276,37.4919530000000,38.2397460000000,38.9961690000000,39.7612480000000,40.5350130000000,41.3174910000000,42.10871,42.9086970000000,43.7174810000000,44.5350880000000,45.3615460000000,46.1968820000000,47.0411240000000,47.8942970000000,48.7564290000000,49.6275470000000,50.5076760000000,51.3968450000000,52.2950780000000,53.2024020000000,54.1188430000000,55.0444280000000,55.9791810000000,56.9231290000000,57.8762980000000,58.8387120000000,59.8103980000000,60.7913810000000,61.7816860000000,62.7813380000000,63.7903630000000,64.8087840000000,65.8366270000000,66.8739180000000,67.9206790000000,68.9769370000000,70.0427150000000,71.1180370000000,72.2029290000000,73.2974140000000,74.4015160000000,75.5152590000000,76.6386680000000,77.7717650000000,78.9145750000000,80.0671220000000,81.2294280000000,82.4015180000000,83.5834150000000,84.7751420000000,85.9767220000000,87.1881780000000,88.4095340000000,89.6408130000000,90.8820370000000,92.1332290000000,93.3944120000000,94.6656090000000,95.9468410000000,97.2381330000000,98.5395060000000,99.8509820000000,101.172584000000,102.504334000000,103.846254000000,105.198366000000,106.560693000000,107.933256000000,109.316077000000,110.709177000000,112.112579000000,113.526305000000,114.950375000000,116.384811000000,117.829635000000,119.284868000000,120.750532000000,122.226647000000,123.713235000000,125.210317000000,126.717914000000,128.236047000000,129.764737000000,131.304005000000,132.853871000000,134.414357000000,135.985483000000,137.567270000000,139.159738000000,140.762907000000,142.376799000000,144.001434000000,145.636832000000,147.283012000000,148.939997000000,150.607804000000,152.286456000000,153.975971000000,155.676371000000,157.387673000000,159.1099,160.843070000000,162.587203000000,164.342319000000,166.108438000000,167.885578000000,169.673761000000,171.473005000000,173.283330000000,175.104755000000,176.937299000000,178.780982000000,180.635824000000,182.501843000000,184.379058000000,186.267489000000,188.167154000000,190.078073000000,192.000265000000,193.933749000000,195.878543000000,197.834666000000,199.802137000000,201.780975000000,203.771198000000,205.772826000000,207.785876000000,209.810367000000,211.846319000000,213.893748000000,215.952674000000,218.023115000000,220.105089000000,222.198615000000,224.303711000000,226.420395000000,228.548685000000,230.688599000000,232.840156000000,235.003373000000,237.178269000000,239.364861000000,241.563167000000,243.773205000000,245.994993000000,248.228549000000,250.473890000000,252.731035000000,255;...
    0,0.077399,0.154799,0.232198,0.309598,0.386997,0.464396,0.541796,0.619195,0.696594,0.773994,0.853367,0.937509,1.026303,1.119818,1.218123,1.321287,1.429375,1.542452,1.660583,1.78383,1.912253,2.045914,2.184872,2.329185,2.47891,2.634105,2.794824,2.961123,3.133055,3.310673,3.494031,3.68318,3.878171,4.079055,4.285881,4.498698,4.717556,4.942502,5.173584,5.410848,5.654341,5.904108,6.160196,6.422649,6.691512,6.966827,7.24864,7.536993,7.831928,8.133488,8.441715,8.756651,9.078335,9.40681,9.742115,10.08429,10.4333750000000,10.78941,11.1524320000000,11.5224820000000,11.8995970000000,12.2838150000000,12.6751740000000,13.0737120000000,13.4794650000000,13.89247,14.3127650000000,14.7403850000000,15.1753660000000,15.6177440000000,16.0675550000000,16.5248330000000,16.9896140000000,17.4619330000000,17.9418240000000,18.4293220000000,18.92446,19.4272720000000,19.9377930000000,20.4560540000000,20.98209,21.5159340000000,22.0576180000000,22.6071750000000,23.1646360000000,23.7300360000000,24.3034040000000,24.8847740000000,25.4741760000000,26.0716420000000,26.6772030000000,27.2908910000000,27.9127360000000,28.5427690000000,29.18102,29.82752,30.4822990000000,31.1453870000000,31.8168130000000,32.4966090000000,33.1848020000000,33.8814220000000,34.5864990000000,35.3000620000000,36.0221390000000,36.75276,37.4919530000000,38.2397460000000,38.9961690000000,39.7612480000000,40.5350130000000,41.3174910000000,42.10871,42.9086970000000,43.7174810000000,44.5350880000000,45.3615460000000,46.1968820000000,47.0411240000000,47.8942970000000,48.7564290000000,49.6275470000000,50.5076760000000,51.3968450000000,52.2950780000000,53.2024020000000,54.1188430000000,55.0444280000000,55.9791810000000,56.9231290000000,57.8762980000000,58.8387120000000,59.8103980000000,60.7913810000000,61.7816860000000,62.7813380000000,63.7903630000000,64.8087840000000,65.8366270000000,66.8739180000000,67.9206790000000,68.9769370000000,70.0427150000000,71.1180370000000,72.2029290000000,73.2974140000000,74.4015160000000,75.5152590000000,76.6386680000000,77.7717650000000,78.9145750000000,80.0671220000000,81.2294280000000,82.4015180000000,83.5834150000000,84.7751420000000,85.9767220000000,87.1881780000000,88.4095340000000,89.6408130000000,90.8820370000000,92.1332290000000,93.3944120000000,94.6656090000000,95.9468410000000,97.2381330000000,98.5395060000000,99.8509820000000,101.172584000000,102.504334000000,103.846254000000,105.198366000000,106.560693000000,107.933256000000,109.316077000000,110.709177000000,112.112579000000,113.526305000000,114.950375000000,116.384811000000,117.829635000000,119.284868000000,120.750532000000,122.226647000000,123.713235000000,125.210317000000,126.717914000000,128.236047000000,129.764737000000,131.304005000000,132.853871000000,134.414357000000,135.985483000000,137.567270000000,139.159738000000,140.762907000000,142.376799000000,144.001434000000,145.636832000000,147.283012000000,148.939997000000,150.607804000000,152.286456000000,153.975971000000,155.676371000000,157.387673000000,159.1099,160.843070000000,162.587203000000,164.342319000000,166.108438000000,167.885578000000,169.673761000000,171.473005000000,173.283330000000,175.104755000000,176.937299000000,178.780982000000,180.635824000000,182.501843000000,184.379058000000,186.267489000000,188.167154000000,190.078073000000,192.000265000000,193.933749000000,195.878543000000,197.834666000000,199.802137000000,201.780975000000,203.771198000000,205.772826000000,207.785876000000,209.810367000000,211.846319000000,213.893748000000,215.952674000000,218.023115000000,220.105089000000,222.198615000000,224.303711000000,226.420395000000,228.548685000000,230.688599000000,232.840156000000,235.003373000000,237.178269000000,239.364861000000,241.563167000000,243.773205000000,245.994993000000,248.228549000000,250.473890000000,252.731035000000,255;...
    0,0.077399,0.154799,0.232198,0.309598,0.386997,0.464396,0.541796,0.619195,0.696594,0.773994,0.853367,0.937509,1.026303,1.119818,1.218123,1.321287,1.429375,1.542452,1.660583,1.78383,1.912253,2.045914,2.184872,2.329185,2.47891,2.634105,2.794824,2.961123,3.133055,3.310673,3.494031,3.68318,3.878171,4.079055,4.285881,4.498698,4.717556,4.942502,5.173584,5.410848,5.654341,5.904108,6.160196,6.422649,6.691512,6.966827,7.24864,7.536993,7.831928,8.133488,8.441715,8.756651,9.078335,9.40681,9.742115,10.08429,10.4333750000000,10.78941,11.1524320000000,11.5224820000000,11.8995970000000,12.2838150000000,12.6751740000000,13.0737120000000,13.4794650000000,13.89247,14.3127650000000,14.7403850000000,15.1753660000000,15.6177440000000,16.0675550000000,16.5248330000000,16.9896140000000,17.4619330000000,17.9418240000000,18.4293220000000,18.92446,19.4272720000000,19.9377930000000,20.4560540000000,20.98209,21.5159340000000,22.0576180000000,22.6071750000000,23.1646360000000,23.7300360000000,24.3034040000000,24.8847740000000,25.4741760000000,26.0716420000000,26.6772030000000,27.2908910000000,27.9127360000000,28.5427690000000,29.18102,29.82752,30.4822990000000,31.1453870000000,31.8168130000000,32.4966090000000,33.1848020000000,33.8814220000000,34.5864990000000,35.3000620000000,36.0221390000000,36.75276,37.4919530000000,38.2397460000000,38.9961690000000,39.7612480000000,40.5350130000000,41.3174910000000,42.10871,42.9086970000000,43.7174810000000,44.5350880000000,45.3615460000000,46.1968820000000,47.0411240000000,47.8942970000000,48.7564290000000,49.6275470000000,50.5076760000000,51.3968450000000,52.2950780000000,53.2024020000000,54.1188430000000,55.0444280000000,55.9791810000000,56.9231290000000,57.8762980000000,58.8387120000000,59.8103980000000,60.7913810000000,61.7816860000000,62.7813380000000,63.7903630000000,64.8087840000000,65.8366270000000,66.8739180000000,67.9206790000000,68.9769370000000,70.0427150000000,71.1180370000000,72.2029290000000,73.2974140000000,74.4015160000000,75.5152590000000,76.6386680000000,77.7717650000000,78.9145750000000,80.0671220000000,81.2294280000000,82.4015180000000,83.5834150000000,84.7751420000000,85.9767220000000,87.1881780000000,88.4095340000000,89.6408130000000,90.8820370000000,92.1332290000000,93.3944120000000,94.6656090000000,95.9468410000000,97.2381330000000,98.5395060000000,99.8509820000000,101.172584000000,102.504334000000,103.846254000000,105.198366000000,106.560693000000,107.933256000000,109.316077000000,110.709177000000,112.112579000000,113.526305000000,114.950375000000,116.384811000000,117.829635000000,119.284868000000,120.750532000000,122.226647000000,123.713235000000,125.210317000000,126.717914000000,128.236047000000,129.764737000000,131.304005000000,132.853871000000,134.414357000000,135.985483000000,137.567270000000,139.159738000000,140.762907000000,142.376799000000,144.001434000000,145.636832000000,147.283012000000,148.939997000000,150.607804000000,152.286456000000,153.975971000000,155.676371000000,157.387673000000,159.1099,160.843070000000,162.587203000000,164.342319000000,166.108438000000,167.885578000000,169.673761000000,171.473005000000,173.283330000000,175.104755000000,176.937299000000,178.780982000000,180.635824000000,182.501843000000,184.379058000000,186.267489000000,188.167154000000,190.078073000000,192.000265000000,193.933749000000,195.878543000000,197.834666000000,199.802137000000,201.780975000000,203.771198000000,205.772826000000,207.785876000000,209.810367000000,211.846319000000,213.893748000000,215.952674000000,218.023115000000,220.105089000000,222.198615000000,224.303711000000,226.420395000000,228.548685000000,230.688599000000,232.840156000000,235.003373000000,237.178269000000,239.364861000000,241.563167000000,243.773205000000,245.994993000000,248.228549000000,250.473890000000,252.731035000000,255]';

mon_xyY = [...
    0.64,0.33,17;...
    0.30,0.60,57.2;...
    0.15,0.060,5.8;...
    0.3127,0.329,80];

mon_oog = [...
    -0.038700,256.138921;...
    -0.038700,256.138921;...
    -0.038700,256.138921];

%% XYZ2lms
function [lms, M] = XYZ2lms(XYZ, fndmtls, cmf)
% Calculates cone excitations (LMS) based on Tristimulus Values (XYZ).
% Conversion matrices from CIE1931 XYZ taken from:
% Golz, J., & MacLeod, D. I. A. (2003). Colorimetry for CRT displays. J Opt Soc Am A Opt Image Sci Vis, 20(5), 769-781. 
% 2014dec14 * [cw]
% 2020.07.22 added output M and 'hunt-pointer-estevez' [cw]

if nargin < 3
    cmf = 'judd';
    if nargin < 2
        fndmtls = 'smithpokorny';
    end
end

M = coneconversionmatrix(fndmtls, cmf);
lms = XYZ*M';

function M = coneconversionmatrix(msrments, cmf)
M = [];
% Conversion matrices towards CIE1931 XYZ taken from:
% Golz, J., & MacLeod, D. I. A. (2003). Colorimetry for CRT displays. J Opt Soc Am A Opt Image Sci Vis, 20(5), 769-781. 

switch lower(msrments)
    case {'smithpokorny', 'sp'}
        % V. C. Smith and J. Pokorny, ‘‘Spectral sensitivity of the
        % foveal cone photopigments between 400 and 500 nm,’’ Vision
        % Res. 15, 161–171 (1975).
        switch lower(cmf)
            case '1931'
                M = [0.15282  0.54383 -0.02795;...
                    -0.15254  0.45524  0.03355;...
                    -0.00045  0.00145  0.95449];
                
            case 'judd'
                % Smith & Pokorny cone fundamentals
                % V. C. Smith & J. Pokorny (1975), Vision Res. 15, 161-172.
                %        X          Y       Z [cw]
                M = [ 0.15514  0.54312  -0.03286    % L alias R
                     -0.15514  0.45684   0.03286    % M alias G
                      0.0      0.0       0.01608];  % S alias B
        end
    case 'smj2'
        % A. Stockman, D. I. A. MacLeod, and N. E. Johnson, ‘‘Spectral
        % sensitivities of the human cones,’’ J. Opt. Soc. Am. A 10,
        % 2491–2521 (1993).
        switch lower(cmf)
            case '1931'
                M = [ 0.18772  0.60445 -0.02517;...
                     -0.14014  0.43056  0.03773;...
                      0.02017 -0.04189  1.08472];
        end
    case 'smj10'
        % A. Stockman, D. I. A. MacLeod, and N. E. Johnson, ‘‘Spectral
        % sensitivities of the human cones,’’ J. Opt. Soc. Am. A 10,
        % 2491–2521 (1993).
        switch lower(cmf)
            case '1931'
                M = [ 0.14460  0.62421 -0.00429;...
                     -0.14506  0.42265  0.05084;...
                      0.03105 -0.06416  1.10923];
        end
    case {'stockmansharpe', 'ss2000', 'ss'}
        % A. Stockman and L. T. Sharpe, ‘‘Spectral sensitivities of the
        % middle- and long-wavelength sensitive cones derived from
        % measurements in observers of known genotype,’’ Vision Res.
        % 40, 1711–1737 (2000).
        switch lower(cmf)
            case '1931'
                % Taken from Golz & MacLeod (2003).
                M = [ 0.17156  0.52901 -0.02199;...
                     -0.15955  0.48553  0.04298;...
                      0.01916 -0.03989  1.03993];
        end
    case {'hunt-pointer-estevez', 'hpe', 'rlab'}
        % https://en.wikipedia.org/wiki/LMS_color_space
        switch lower(cmf)
            case '1931'
                M = [0.38971,   0.68898,   -0.07868;...
                    -0.22981,   1.18340,    0.04641;... 
                     0.00000,   0.00000,    1.00000];
        end
end

if isempty(M)
    error('This transformation matrix is not implemented');
end